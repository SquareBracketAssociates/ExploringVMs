! Overview of the Bytecode Compiler

intro

we compile for closure *context* interpreter blabla.

!! Overall compiler overview

what a compiler does blabla

!! Restrictive Smalltalk

no cascade, runtime array, name primitive, class variable, shared pool

!! Abstract Syntax Tree proposed

Simple and clean, explain cleaned

!! CompiledCode format

+Memory representation of CompiledCode.>file://figures/CompiledCode.pdf|width=75|label=CompiledCode+

executable by the interpreter.

Common for closure's function and compiled method. 

Instruction encoding

stack operations....

! Compiling your First Methods

!! Compiling Special Variables

thisContext, self super

!! Compiling Returns

ret

!! Compiling Methods and Sequences

simple things

!! Compiling Literals

lit

- first 3 method should be compiled !!!

! Compiling Variable Accesses

!! Variable Scopes and Lookups

+Variable scopes.>file://figures/MethodScopes.pdf|width=35|label=MethodScopes+

+Variable Lookup.>file://figures/VariableLookup.pdf|width=95|label=VariableLookup+

normal variables : building the scopes
Global>>instance>>Temp

!! Compiling Assignment

assign

! Full Method Compiler

now compile everything but closures

!! Compiling Message Sends

regular and super sends

!! Compiling primitives

primitive numbered or 0

! Closure compiler

!! Compiling Variable Accesses

+Variable scopes.>file://figures/BlockScopes.pdf|width=50|label=BlockScopes+

new scopes for temps 

remote temps

!! Compiling a closure

cl

! Static optimizations control flow messages

cant optimize much blabla

!! Inlining Finite Loops

the example of #to:do: & #to:by:do:

!! Inlining Branches

the example of ifTrue:, ifTrue:ifFalse:, ifFalse:ifTrue:, ifFalse:

! What makes a good compiler ?

blabla

!!! Handling Compilation error and warnings

example

!!! Compilation time

why these 2 are first ?

LLVM -=> fast to compile and good error handling, 10% slower in generated code and Apple moved.

!!! Generated code execution time

not much we can do in the bytecode compiler though :(

!!! Generated code execution memory footprint

often both later are the same as memory access are the more time consuming operation and there are caches.

! Discussion

blabla

!! Handling the hidden semantics

returns and nil blocks.

!! Temp vectors

compiling for StackInterpreter

no implementation :( in exercise, though you can do it.

!! Static versus runtime optimizations

Aggressive specialization vs memory footprint

!! Type prediction

example of arthmetic, memory + performance difference

!! Hard Inlining of specific messages

The example of pointer identity
